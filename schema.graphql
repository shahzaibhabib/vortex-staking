type User @entity {
  # user eth address
  id: ID!
  # list of portals created by the user
  portals: [Portal!]!
  # list of stakes created by the user
  stakes: [Stake!]!
}

type Vortex @entity {
  # vortex contract address
  id: ID!
  # list of portal addresses
  portals: [String!]!
}

type Token @entity {
  # token address
  id: ID!
  # name of the token
  name: String!
  # symbol of the token
  symbol: String!
  # number of decimals token supports
  decimals: BigInt!
}

type Portal @entity {
  # portal address
  id: ID!
  # name of the portal
  name: String!
  # owner's address of the portal
  owner: String!
  # last block upto which the portal reward gets distributed
  endBlock: BigInt!
  # token(s) being rewarded by the portal
  rewardTokens: [Token!]!
  # amount of reward token distributed per block
  rewardRates: [BigInt!]!
  # token alloed to stake on this portal
  stakingToken: Token!
  # staker can not stake more amount of tokens than this limit
  userStakeLimit: BigInt!
  # total amount of tokens that can be staked on this portal across all stakers
  portalStakeLimit: BigInt!
  # minimum amount of tokens needed to be staked in order for the portal to start distributing rewards
  distributionLimit: BigInt!

  # amount of reward tokens deposited
  rewards: [BigInt!]!
  # deposit expiry date
  newEndBlock: BigInt!
  # depositor address
  recipient: String!

  # timestamp at which portal is created
  createdAt: BigInt!
  # boolean indicating if the reward has also been deposited
  rewardAdded: Boolean!
}

type Stake @entity {
  # stake
  id: ID!
  # portal in which stake occur
  portal: Portal!
  # staker address
  staker: String!
  # recrecipient address
  recipient: String!
  # amount of token staked
  amount: BigInt!
  # name of the stake
  name: String!
  # timestamp at which stake occured
  timestamp: BigInt!
  # boolean indicating if the stake is active or not
  active: Boolean!
}
